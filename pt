#!/bin/sh

##############################################
#  License :  GNU General Public License V3  #
#  Author  :  CSCHAD (B.ANAS)                #
#  Blog    :  https://cschad.tech            #
#                                            #
#  Shell script to help you pronounce        # 
#   foreign words                            #
##############################################

set -e

dmenu=false
fzf=false

download_dir="$HOME/.pt"
version="dev 2.0"

sname="$(basename $0)"

show_help(){
    printf "
    Usage:  $sname [ -q ARG ] [ -l ARG ] [vfdm]

         -q  For the search query !
               Example: $sname -q hallo

         -l  To add a language code
               Example  $sname -l en -q hello

         -d  To download the audios and store them locally. The default path is ${download_dir}
                
                * For each query a folder will be created and store all the audios inside it !
                * Support offline usage. 

         -v  Show version

         -m  To use dmenu

         -f  To use fzf
"
}

getsource(){

    trap cleanup INT QUIT TERM EXIT

    query=$(printf "$query" | tr '[:upper:]' '[:lower:]' | tr -d ' ')
    aud_dir="${download_dir}/${query}"
    tmpfile=`mktemp`

    cleanup(){
        [ -f $tmpfile ] && rm $tmpfile
    }
    curl -s "https://${lang:=en}.wiktionary.org/wiki/${query}" | \
        grep -Eo '//upload[a-zA-Z0-9./?=_%:-]*\.+(ogg|mp3|wav|aac)' | sed 's/\/\//https:&/g' >$tmpfile
}

show_version(){
        printf "$sname Version: %s\n" "$version"
        exit 0
}


check_dep(){
    if ! command -v "$1";then
        printf "$1 is not installed !\n" && exit 127
    fi
}

_main_(){
    if ls -A "$aud_dir" 2> /dev/null;then
        selected=$(ls "$aud_dir" | $1)
        mpv "${aud_dir}/${selected}"
        exit 0
    else
        getsource
        if [ -s $tmpfile ];then
            selected=$(rev $tmpfile | cut -d'/' -f 1 | rev | $1 )
            grep $selected $tmpfile | mpv --playlist=-
            [ $download ] && download_aud
        else
            printf ":/ No results found for %s \n" "$query" >&2
            exit 0
        fi
    fi
}

download_aud(){
    mkdir -p "${aud_dir}" 
    printf "Downloading the audios ...\n"
    cat $tmpfile | parallel curl -O --output-dir "${aud_dir}" && printf "Downloads completed.\n" \
        || (printf "Enable to download the audio files !\n" && exit 1)
}

while getopts "q:hl:dfmv" OPT; do
    case "$OPT" in 
        h) show_help && exit 0 ;; 
        q) query=$OPTARG ;;
        l) lang=$OPTARG ;;
        f) fzf=true;;
        d) download=true ;;
        m) dmenu=true ;;
        v) show_version ;;
        *) printf "Wrong usage !\tShow help with: $ $sname -h\n" >&2 && exit 1;;
    esac
done


# If the query is empty or is not a casual word
if ! expr "$query" : "[a-zA-Z]" 1>/dev/null; then
    printf "Error: The query must be a non empty letter !\n" >&2  
    exit 1
fi

[ $dmenu = "true" ] && [ $fzf = "true" ] && \
    printf "Error: -m and -f are mutually exclusive and may only be used once\n" >&2 && exit 2

if $dmenu;then
    check_dep dmenu
     _main_ 'dmenu -l 10'
elif $fzf
then
    check_dep fzf 
    _main_ "fzf --reverse --height=40%"
else
    _main_ "head -n 1"
fi
